import org.apache.jmeter.protocol.amf.util.AmfXmlConverter;
import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Arrays;

public class AmfTest {

    private static byte[] toByteArray(String hex) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        String[] toks = hex.split(" ");
        for (String tok : toks) baos.write(Integer.parseInt(tok, 16));
        return baos.toByteArray();
    }

    @Test
    public void testSerialize() {
        String c = "00 03 00 00 00 01 00 0C 2F 31 34 2F 6F 6E 52 65 73 75 6C 74 00 00 FF FF FF FF 11 0A 81 03 55 66 6C 65 78 2E 6D 65 73 73 61 67 69 6E 67 2E 6D 65 73 73 61 67 65 73 2E 41 63 6B 6E 6F 77 6C 65 64 67 65 4D 65 73 73 61 67 65 13 74 69 6D 65 73 74 61 6D 70 0F 68 65 61 64 65 72 73 09 62 6F 64 79 1B 63 6F 72 72 65 6C 61 74 69 6F 6E 49 64 13 6D 65 73 73 61 67 65 49 64 15 74 69 6D 65 54 6F 4C 69 76 65 11 63 6C 69 65 6E 74 49 64 17 64 65 73 74 69 6E 61 74 69 6F 6E 05 42 75 4C 24 BB 99 90 00 0A 03 01 0A 23 2F 74 73 2E 69 66 77 2E 64 74 6F 2E 44 74 6F 41 73 73 65 6D 62 6C 65 72 11 5F 5F 72 65 73 75 6C 74 0F 6D 65 73 73 61 67 65 0A 82 53 5F 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 4F 75 74 70 75 74 56 4F 13 63 74 79 43 74 43 6F 64 65 13 65 72 72 6F 72 44 65 73 63 0D 66 73 61 6D 61 70 0B 6E 66 61 72 65 17 70 72 6E 46 61 72 65 4C 69 6E 65 0D 6F 72 69 67 69 6E 1B 68 69 64 64 65 6E 49 64 74 43 6F 64 65 0F 65 72 72 6F 72 4E 6F 11 66 61 72 65 4C 69 73 74 0F 6D 6F 72 65 49 6E 64 0F 73 6B 64 4C 69 73 74 0B 74 69 74 6C 65 0F 64 73 63 43 6F 64 65 11 72 65 6D 61 69 6E 54 70 15 66 61 72 65 4F 72 69 67 69 6E 2B 77 74 73 65 61 74 44 69 73 70 6C 61 79 52 75 6C 65 4C 69 73 74 09 6E 73 6B 64 0D 63 75 72 72 54 70 0D 63 62 46 61 72 65 0F 63 61 72 66 61 72 65 15 72 65 6D 61 69 6E 46 61 72 65 01 06 37 EC A0 95 EC 83 81 EC A0 81 EC 9D B8 20 44 41 54 41 EC 9E 85 EB 8B 88 EB 8B A4 2E 0A 23 5F 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 46 73 61 6D 61 70 56 4F 0F 66 73 61 4C 69 73 74 0F 6E 66 73 61 6D 61 70 0A 07 43 66 6C 65 78 2E 6D 65 73 73 61 67 69 6E 67 2E 69 6F 2E 41 72 72 61 79 43 6F 6C 6C 65 63 74 69 6F 6E 09 01 01 06 03 30 06 4E 01 01 01 06 4E 0A 15 09 01 01 01 0A 15 09 01 01 0A 83 63 5D 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 54 69 74 6C 65 56 4F 19 64 65 70 63 69 74 79 34 64 65 73 63 19 61 72 72 63 69 74 79 31 64 65 73 63 19 64 65 70 63 69 74 79 33 64 65 73 63 19 64 65 70 63 69 74 79 31 64 65 73 63 13 61 72 72 4E 61 74 69 6F 6E 11 6E 6F 6F 66 69 74 69 6E 19 61 72 72 63 69 74 79 34 64 65 73 63 19 61 72 72 63 69 74 79 32 64 65 73 63 11 64 65 70 64 61 74 65 33 11 64 65 70 64 61 74 65 34 11 64 65 70 64 61 74 65 31 11 64 65 70 64 61 74 65 32 19 64 65 70 63 69 74 79 35 64 65 73 63 19 61 72 72 63 69 74 79 35 64 65 73 63 11 74 72 69 70 74 79 70 65 11 64 65 70 64 61 74 65 35 11 64 65 70 63 69 74 79 31 15 61 72 72 4F 70 43 6C 61 73 73 11 61 72 72 63 69 74 79 34 11 61 72 72 63 69 74 79 35 19 61 72 72 63 69 74 79 33 64 65 73 63 11 61 72 72 63 69 74 79 31 11 61 72 72 63 69 74 79 32 11 61 72 72 63 69 74 79 33 11 64 65 70 63 69 74 79 35 11 64 65 70 63 69 74 79 34 17 63 6F 6D 70 61 72 74 6D 65 6E 74 11 64 65 70 63 69 74 79 33 11 64 65 70 63 69 74 79 32 19 64 65 70 63 69 74 79 32 64 65 73 63 01 06 23 EB B6 81 EA B2 BD 28 EB B2 A0 EC 9D B4 EC A7 95 29 01 06 0D EC 84 9C EC 9A B8 01 04 00 01 06 01 01 01 06 11 32 30 31 36 30 35 33 30 06 01 01 01 06 05 4F 57 01 06 07 53 45 4C 01 01 01 01 06 07 50 45 4B 06 01 01 01 01 06 03 59 01 06 01 06 01 01 01 01 01 06 4E 01 01 01 01 0A 81 03 3D 74 73 2E 69 66 77 2E 73 65 72 76 69 63 65 2E 6D 65 73 73 61 67 65 2E 4D 65 73 73 61 67 65 16 1D 64 65 74 61 69 6C 5F 6D 65 73 73 61 67 65 15 6D 73 67 5F 63 64 5F 61 72 67 0F 6C 61 6E 67 5F 63 64 11 74 72 61 6E 73 5F 79 6E 23 64 65 74 61 69 6C 5F 6D 73 67 5F 63 64 5F 61 72 67 1B 64 65 74 61 69 6C 5F 6D 73 67 5F 63 64 0D 6D 73 67 5F 63 64 06 4D EC A0 95 EC 83 81 EC A0 81 EC 9C BC EB A1 9C 20 EC A1 B0 ED 9A 8C EB 90 98 EC 97 88 EC 8A B5 EB 8B 88 EB 8B A4 2E 06 01 01 01 06 4E 01 01 06 1D 73 75 63 63 65 73 73 2E 73 65 61 72 63 68 06 49 35 35 35 45 34 34 42 32 2D 45 45 45 33 2D 45 34 38 42 2D 37 37 41 36 2D 43 32 34 42 42 39 30 44 30 42 35 33 06 49 45 45 35 41 45 30 31 45 2D 38 39 30 45 2D 46 46 43 43 2D 36 34 37 34 2D 34 41 35 33 30 41 46 33 42 33 35 45 05 00 00 00 00 00 00 00 00 06 49 45 43 44 41 39 46 31 35 2D 36 34 30 41 2D 43 37 35 30 2D 33 46 30 41 2D 36 37 33 44 31 34 36 34 37 36 39 31 01";


        //RandomAccessFile f = new RandomAccessFile("req.data", "r");
        byte[] amf = toByteArray(c);//new byte[(int) f.length()];


        //f.read(amf);
        String readAbleXml = AmfXmlConverter.convertAmfMessageToXml(amf, true);
        System.out.println("*** Request: \n " + readAbleXml);

        byte[] bytes = AmfXmlConverter.convertXmlToAmfMessage(readAbleXml);

        String readAbleXml2 = AmfXmlConverter.convertAmfMessageToXml(bytes, true);

        System.out.println(readAbleXml2);

        Assert.assertEquals(readAbleXml, readAbleXml2);

        Assert.assertTrue(Arrays.equals(amf, bytes));

    }

    @Test
    public void testDeserialize() {

    }

    @Test
    public void testReq() throws IOException {
        String headers = "POST http://airtkt2.hanatour.com/messagebroker/amf HTTP/1.1\n" +
                "Host: airtkt2.hanatour.com\n" +
                "Connection: keep-alive\n" +
                "Content-Length: 919\n" +
                "Origin: http://airtkt2.hanatour.com\n" +
                "X-Requested-With: ShockwaveFlash/21.0.0.216\n" +
                "User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36\n" +
                "Content-Type: application/x-amf\n" +
                "Accept: */*\n" +
                "DNT: 1\n" +
                "Referer: http://airtkt2.hanatour.com/flex_fr/HGRS_FR.swf/[[DYNAMIC]]/5\n" +
                "Accept-Encoding: gzip, deflate\n" +
                "Accept-Language: zh-CN,zh;q=0.8,en;q=0.6";
        Socket socket = new Socket();
        socket.connect(new InetSocketAddress("airtkt2.hanatour.com", 80));
        socket.getOutputStream().write(headers.getBytes());
        socket.getOutputStream().flush();

        String c = "00 03 00 00 00 01 00 0C 2F 31 34 2F 6F 6E 52 65 73 75 6C 74 00 00 FF FF FF FF 11 0A 81 03 55 66 6C 65 78 2E 6D 65 73 73 61 67 69 6E 67 2E 6D 65 73 73 61 67 65 73 2E 41 63 6B 6E 6F 77 6C 65 64 67 65 4D 65 73 73 61 67 65 13 74 69 6D 65 73 74 61 6D 70 0F 68 65 61 64 65 72 73 09 62 6F 64 79 1B 63 6F 72 72 65 6C 61 74 69 6F 6E 49 64 13 6D 65 73 73 61 67 65 49 64 15 74 69 6D 65 54 6F 4C 69 76 65 11 63 6C 69 65 6E 74 49 64 17 64 65 73 74 69 6E 61 74 69 6F 6E 05 42 75 4C 24 BB 99 90 00 0A 03 01 0A 23 2F 74 73 2E 69 66 77 2E 64 74 6F 2E 44 74 6F 41 73 73 65 6D 62 6C 65 72 11 5F 5F 72 65 73 75 6C 74 0F 6D 65 73 73 61 67 65 0A 82 53 5F 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 4F 75 74 70 75 74 56 4F 13 63 74 79 43 74 43 6F 64 65 13 65 72 72 6F 72 44 65 73 63 0D 66 73 61 6D 61 70 0B 6E 66 61 72 65 17 70 72 6E 46 61 72 65 4C 69 6E 65 0D 6F 72 69 67 69 6E 1B 68 69 64 64 65 6E 49 64 74 43 6F 64 65 0F 65 72 72 6F 72 4E 6F 11 66 61 72 65 4C 69 73 74 0F 6D 6F 72 65 49 6E 64 0F 73 6B 64 4C 69 73 74 0B 74 69 74 6C 65 0F 64 73 63 43 6F 64 65 11 72 65 6D 61 69 6E 54 70 15 66 61 72 65 4F 72 69 67 69 6E 2B 77 74 73 65 61 74 44 69 73 70 6C 61 79 52 75 6C 65 4C 69 73 74 09 6E 73 6B 64 0D 63 75 72 72 54 70 0D 63 62 46 61 72 65 0F 63 61 72 66 61 72 65 15 72 65 6D 61 69 6E 46 61 72 65 01 06 37 EC A0 95 EC 83 81 EC A0 81 EC 9D B8 20 44 41 54 41 EC 9E 85 EB 8B 88 EB 8B A4 2E 0A 23 5F 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 46 73 61 6D 61 70 56 4F 0F 66 73 61 4C 69 73 74 0F 6E 66 73 61 6D 61 70 0A 07 43 66 6C 65 78 2E 6D 65 73 73 61 67 69 6E 67 2E 69 6F 2E 41 72 72 61 79 43 6F 6C 6C 65 63 74 69 6F 6E 09 01 01 06 03 30 06 4E 01 01 01 06 4E 0A 15 09 01 01 01 0A 15 09 01 01 0A 83 63 5D 6B 72 2E 65 74 6F 75 72 73 6F 66 74 2E 68 67 72 73 32 2E 66 72 2E 63 6F 6D 6D 6F 6E 2E 76 6F 2E 53 6B 64 46 61 72 65 54 69 74 6C 65 56 4F 19 64 65 70 63 69 74 79 34 64 65 73 63 19 61 72 72 63 69 74 79 31 64 65 73 63 19 64 65 70 63 69 74 79 33 64 65 73 63 19 64 65 70 63 69 74 79 31 64 65 73 63 13 61 72 72 4E 61 74 69 6F 6E 11 6E 6F 6F 66 69 74 69 6E 19 61 72 72 63 69 74 79 34 64 65 73 63 19 61 72 72 63 69 74 79 32 64 65 73 63 11 64 65 70 64 61 74 65 33 11 64 65 70 64 61 74 65 34 11 64 65 70 64 61 74 65 31 11 64 65 70 64 61 74 65 32 19 64 65 70 63 69 74 79 35 64 65 73 63 19 61 72 72 63 69 74 79 35 64 65 73 63 11 74 72 69 70 74 79 70 65 11 64 65 70 64 61 74 65 35 11 64 65 70 63 69 74 79 31 15 61 72 72 4F 70 43 6C 61 73 73 11 61 72 72 63 69 74 79 34 11 61 72 72 63 69 74 79 35 19 61 72 72 63 69 74 79 33 64 65 73 63 11 61 72 72 63 69 74 79 31 11 61 72 72 63 69 74 79 32 11 61 72 72 63 69 74 79 33 11 64 65 70 63 69 74 79 35 11 64 65 70 63 69 74 79 34 17 63 6F 6D 70 61 72 74 6D 65 6E 74 11 64 65 70 63 69 74 79 33 11 64 65 70 63 69 74 79 32 19 64 65 70 63 69 74 79 32 64 65 73 63 01 06 23 EB B6 81 EA B2 BD 28 EB B2 A0 EC 9D B4 EC A7 95 29 01 06 0D EC 84 9C EC 9A B8 01 04 00 01 06 01 01 01 06 11 32 30 31 36 30 35 33 30 06 01 01 01 06 05 4F 57 01 06 07 53 45 4C 01 01 01 01 06 07 50 45 4B 06 01 01 01 01 06 03 59 01 06 01 06 01 01 01 01 01 06 4E 01 01 01 01 0A 81 03 3D 74 73 2E 69 66 77 2E 73 65 72 76 69 63 65 2E 6D 65 73 73 61 67 65 2E 4D 65 73 73 61 67 65 16 1D 64 65 74 61 69 6C 5F 6D 65 73 73 61 67 65 15 6D 73 67 5F 63 64 5F 61 72 67 0F 6C 61 6E 67 5F 63 64 11 74 72 61 6E 73 5F 79 6E 23 64 65 74 61 69 6C 5F 6D 73 67 5F 63 64 5F 61 72 67 1B 64 65 74 61 69 6C 5F 6D 73 67 5F 63 64 0D 6D 73 67 5F 63 64 06 4D EC A0 95 EC 83 81 EC A0 81 EC 9C BC EB A1 9C 20 EC A1 B0 ED 9A 8C EB 90 98 EC 97 88 EC 8A B5 EB 8B 88 EB 8B A4 2E 06 01 01 01 06 4E 01 01 06 1D 73 75 63 63 65 73 73 2E 73 65 61 72 63 68 06 49 35 35 35 45 34 34 42 32 2D 45 45 45 33 2D 45 34 38 42 2D 37 37 41 36 2D 43 32 34 42 42 39 30 44 30 42 35 33 06 49 45 45 35 41 45 30 31 45 2D 38 39 30 45 2D 46 46 43 43 2D 36 34 37 34 2D 34 41 35 33 30 41 46 33 42 33 35 45 05 00 00 00 00 00 00 00 00 06 49 45 43 44 41 39 46 31 35 2D 36 34 30 41 2D 43 37 35 30 2D 33 46 30 41 2D 36 37 33 44 31 34 36 34 37 36 39 31 01";
        byte[] body = toByteArray(c);//new byte[(int) f.length()];
        socket.getOutputStream().write(body);
        socket.getOutputStream().flush();

        int chr = -1;
        while ((chr=socket.getInputStream().read()) != -1){
            System.out.print((char)chr);
        }
    }
}
